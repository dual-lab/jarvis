// Custom build script to create the isofile
//

use std::env;
use std::fs::{self, File};
use std::io::Write;
use std::path::{Path, PathBuf};

fn main() {
    let arch_config_dir: &str = if cfg!(target_arch = "x86_64") {
        "x86_64"
    } else {
        "undefined"
    };
    let output_dir = env::var("OUT_DIR").unwrap();
    let src_arch_path = Path::new("./src").join(arch_config_dir);
    let output_path = Path::new(&output_dir).join("isofile");
    let boot_path = Path::new(&output_path).join("boot");
    let grub_path = Path::new(&boot_path).join("grub");
    let mut directory_structure = PathBuf::new();

    // Create isofile dir structure
    directory_structure.push(&output_path);
    directory_structure.push(&boot_path);
    directory_structure.push(grub_path);

    fs::create_dir_all(&directory_structure).unwrap();

    // copy grub config path
    let grub_to_copy = Path::new(&src_arch_path).join("grub/grub.cfg");
    fs::copy(
        grub_to_copy,
        Path::new(&directory_structure).join("grub.cfg"),
    )
    .unwrap();
    // TODO: create make iso file script
    let script_path = Path::new(&output_dir).join("makeiso.sh");
    let mut script_file = File::create(script_path).unwrap();

    // Fill script file
    writeln!(&mut script_file, "#!/bin/sh").unwrap();
    writeln!(&mut script_file, "###################################").unwrap();
    writeln!(&mut script_file, "# This script is autogenerated by a").unwrap();
    writeln!(&mut script_file, "# pre build rust script.").unwrap();
    writeln!(&mut script_file, "###################################").unwrap();
    writeln!(&mut script_file, "set -Eeuo pipefail").unwrap();
    writeln!(
        &mut script_file,
        "
if [ -z $1 ]; then
    printf \"No kernel location specifed\\n\"
    exit 1
fi"
    )
    .unwrap();
    writeln!(
        &mut script_file,
        "cp $1 {}/kernel-jarvis-{}.bin
grub-mkrescue -o {} {} 2> /dev/null",
        boot_path.to_str().unwrap(),
        arch_config_dir,
        Path::new(&output_dir)
            .join(format!(
                "jarvis-{}-{}.iso",
                arch_config_dir,
                env!("CARGO_PKG_VERSION")
            ))
            .to_str()
            .unwrap(),
        output_path.to_str().unwrap()
    )
    .unwrap();

    // setup re-run if changed
    println!("cargo:rerun-if-changed=src/{}", arch_config_dir);
    println!("cargo:rerun-if-changed=build.rs");
}
